/*! FormaJS v0.0.1 | (c) Krasen Slavov | formaja.com/license */
'use strict';(($)=>{$.forma=(options)=>{const settings=$.extend({container:'.forma',manual:!1,show:!1,auto:!1,},options);if(typeof settings.manual!=='boolean'||typeof settings.show!=='boolean'||typeof settings.auto!=='boolean'){console.error('Incorrect option type! All manual, show, and auto must be of boolean type.');return!1}
if(typeof settings.container==='string'){settings.container=$(settings.container)}
const supported=['input[type="text"]','input[type="email"]','input[type="password"]','input[type="url"]','input[type="number"]','input[type="submit"]','input[type="reset"]','select','textarea','button',];const form=settings.container;if(form.length===0||form.get(0).localName!=='form'){console.error('Not found! Form element is not defined or does not exist into the DOM.');return!1}
const elems=Object.values(form.get(0).elements);if(settings.manual===!0){let formLabels=form.find('label');formLabels.on({click:(event)=>{let self=$(event.currentTarget);if(event.target!==event.currentTarget){return!1}
self.toggleClass('forma-open')}}).addClass('forma-manual')}
form.find('label:first-of-type').addClass('forma-open').focus();if(settings.show===!0){form.find('label').addClass('forma-open')}
let currElem,currSpan,currSpanText,locName;elems.map((el,idx)=>{currElem=$(elems[idx]);locName=currElem.get(0).localName;if(locName==='input'){locName=`${locName}[type="${currElem.get(0).type}"]`}
if($.inArray(locName,supported)>-1){if(settings.auto===!0){currSpan=currElem.closest('label').find('span');currSpanText=currSpan.text().toLowerCase();if($('em',currSpan).length===0){currSpan.append($('<em />').text(`Enter ${ currSpanText}...`))}
currElem.attr('placeholder',`Enter ${ currSpanText}...`)}
currElem.attr('tabindex',idx);currElem.on({'click change keyup':(event)=>{let self=$(event.currentTarget);let spanElem=self.closest('label').find('span');if(!spanElem.find('strong').length){spanElem.append($('<strong />'))}
if(self.is(':valid')){spanElem.find('strong').addClass('valid').removeClass('invalid');spanElem.find('em').hide()}else{spanElem.find('strong').addClass('invalid').removeClass('valid');form.addClass('invalid')}
if(self.get(0).type==='password'){spanElem.find('strong').empty().append(self.val().length+' characters')}else{spanElem.find('strong').empty().append(self.val())}},keydown:(event)=>{if(event.which===9){event.preventDefault();let self=$(event.currentTarget);let spanElem=self.closest('label').find('span');let next=form.find('label.forma-open').next();$(self).on({blur:(event)=>{self=$(event.currentTarget);if(self.get(0).validationMessage){spanElem.addClass('invalid');if(self.get(0).pattern&&self.get(0).title){spanElem.attr('data-rules',self.get(0).title)}else{spanElem.attr('data-rules',self.get(0).validationMessage)}
form.addClass('invalid')}else{spanElem.removeClass('invalid');spanElem.removeAttr('data-rules');if(form.find('.invalid').length===0){form.find('button[type="submit"]').removeAttr('disabled')}}}});form.find('label.forma-open').removeClass('forma-open');if(next.length===0||next.find(`${supported.join(',')}`).get(0)===undefined){form.find('label:first-of-type').addClass('forma-open');form.find('label:first-of-type').find(`${supported.join(',')}`).focus()}else{next.addClass('forma-open');next.find(`${supported.join(',')}`).focus()}
return!1}}})}else{console.error(`Not supported! Currently ${locName} isn't a supported form field.`);return!1}})}})(jQuery)